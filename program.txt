编程心得与坑
1、客户端不可信，比如说 又一个人 提供视频转码服务，转码成功后 它会通知我，
接口文档上写的是通知一次，但是我们作为程序员一定要想到它回调多次的情况。
2、写程序不要有拖延症习惯，这样留给自己解决突发情况 的时间会变得很少


	$url ="./ask_detail/detail/8";
	$url ="/ask_detail/detail/8";
  这2个url 给a标签会有什么样的效果，后者会当成一个绝对路径来找，前者呢 不会


if(intval($rand) == $redis->get('login:' . $mobile))
{
//xx处理业务
}
这个判断有些不正确的地方 你看出来了吗？ 因为可能存在没有的验证码，左值为0 右值也为0 于是为true 改进代码如果

if((intval($rand) == $redis->get('login:' . $mobile))&&$rand>0)
{
//xx处理业务
}


大家都应该用统一的文件管理工具。
否则版本不一很容易出问题。
醉了醉了
redis
写代码抽象思维很重要，先想好自己要做什么，适当运用设计模式来解决问题

今天帮助处理oss问题
订单相关问题


js错误代码例子
function  needLogin() {

        var loginBool = <?php echo intval($_SESSION['user_id']);?>
        if(!loginBool){
            if(getEnv() ==1){
            $("#loginShow").click();
            }else if(getEnv()==2){
                $("#loginShow").click();
            }else if(getEnv()==3){
                window.location="/wechat/login";
            }
        }
    }
    needLogin();

    正确做法
    function  needLogin() {

            var loginBool = <?php echo intval($_SESSION['user_id']);?>;//这个fen hao分号太重要了
     if(!loginBool){
                if(getEnv() ==1){
                $("#loginShow").click();
                }else if(getEnv()==2){
                    $("#loginShow").click();
                }else if(getEnv()==3){
                    window.location="/wechat/login";
                }
            }
        }
        needLogin();

        在js中不要定义重复函数，否则 代码无法正确执行。。有些时候粘贴了几次 问题就出来了。放在一个公共地方 或者文件里面 选择加载即可

        js document ready


        git tip 个性化文件 要加入忽略列表

 数据结构导数据，新旧库迁移
 方法1
 写接口，根据用户导数据，按用户消费行为分级，数据导入导出

 方法2
 数据倒过去，新表的先把主键自增去掉，主键索引关掉，数据导完后，再恢复主键


 另外，想到好点子的时候，不要直接告诉同事，应该直接告诉领导( 避免同事告诉领导，然后就变成他自己的想法了)


改动composer文件 或者别人git仓库里文件的时候 在自己项目中使用的时候，要做文档备注 不然可能会忘掉

分析bug要耐心 细心调试，重复犯错毫无意义

redis 字符串 列表 集合 哈希 有序集合 这个不仅要了解到这几种结构名词，同时在大脑里面构思其具体样式，
redis操作数据都是可以按毫秒计算的，redis事务，持久化方式 有aof 和快照


//课程 报名 ，关联视频，有课程

退出的时候 检测有没有上一页 没有跳转一个默认页

微信登录或者其他的 退出，不要用history go -1,用php 的redirect 跳转

判断竞争条件，及时销毁不用的session



微信支付相关限制太多了，
js作用域，回调域名，扫码回掉域名，支付发起目录，涉及到 商户平台账号，公众平台账号


ci框架路由注意 大小写，配置文件中的 index_page 会影响到他的路由，自动重写带上index.php，可能与 nginx配置文件冲突

比如 有人的做法是hi index_page 是index.php，config中的base_url是个路径，这样他用ip直接访问 上级 就会得到正确的ci路径
这样做 不如 nginx 配置好重写，index_page 取空 ，base_url实际路径


在Resque中，一个后台任务被抽象为由三种角色共同完成：

Job | 任务 ： 一个Job就是一个需要在后台完成的任务，比如群发送邮件，就可以抽象为一个Job。在Resque中一个Job就是一个Class。
Queue | 队列 ： 也就是上文的消息队列，在Resque中，队列则是由Redis实现的。Resque还提供了一个简单的队列管理器，可以实现将Job插入/取出队列等功能。
Worker | 执行者 ： 负责从队列中取出Job并执行，可以以守护进程的方式运行在后台。
那么基于这个划分，一个后台任务在Resque下的基本流程是这样的：
在Resque中，有一个很重要的设计：一个Worker，可以处理一个队列，也可以处理很多个队列，并且可以通过增加Worker的进程/线程数来加快队列的执行速度。

流程如下：

将一个后台任务编写为一个独立的Class，这个Class就是一个Job。
在需要使用后台程序的地方，系统将Job Class的名称以及所需参数放入队列。
以命令行方式开启一个Worker，并通过参数指定Worker所需要处理的队列。
Worker作为守护进程运行，并且定时检查队列。
当队列中有Job时，Worker取出Job并运行，即实例化Job Class并执行Class中的方法。



多考虑恶劣情况，多去看手册，有风险的地方 及时写日志，思考如何消除风险

php安装扩展 之mcrypt 加密
1.下载Libmcrypt,mhash,mcrypt安装包
Libmcrypt(libmcrypt-2.5.8.tar.gz)：http://sourceforge.net/project/showfiles.php?group_id=87941&package_id=91774&release_id=487459

mcrypt(mcrypt-2.6.8.tar.gz ):http://sourceforge.net/project/showfiles.php?group_id=87941&package_id=91948&release_id=642101

mhash(mhash-0.9.9.9.tar.gz):http://sourceforge.net/project/showfiles.php?group_id=4286&package_id=4300&release_id=645636


2.先安装Libmcrypt

#tar -zxvf libmcrypt-2.5.8.tar.gz

#cd libmcrypt-2.5.8

#./configure

#make

#make install

说明：libmcript默认安装在/usr/local

安装完后重启机器



3.再安装mhash

#tar -zxvf mhash-0.9.9.9.tar.gz

#cd mhash-0.9.9.9

#./configure

#make

#make install



4.最后安装mcrypt

#tar -zxvf mcrypt-2.6.8.tar.gz

#cd mcrypt-2.6.8

#LD_LIBRARY_PATH=/usr/local/lib ./configure

#make

#make install

说明：由于在配置Mcrypt时，会找不到libmcrypt的链接库，导致无法编译，因为Libmcrypt的链接库在/usr/local/lib文件夹下。

因次，在配置mcrypt时要加入LD_LIBRARY_PATH=/usr/local/lib导入键接库。

三.安装PHP的Pecl扩展mcrypt
注意mcrypt是PHP自带的Pecl扩展，所以只要去PHP的解压缩目录去找mcrypt包即可。
这一点区别于PHP安装第三方扩展，参考PHP安装与使用VLD查看opcode代码【PHP安装第三方扩展的方法】
1.动态加载
使用php的常见问题是：编译php时忘记添加某扩展，后来想添加扩展，但是因为安装php后又装了一些东西如PEAR等，不想重装整个PHP，于是可以采用动态编译，使用phpize。需要注意的是要有与现有php完全相同的php压缩包。
#cd /usr/php-5.4.8/ext/mcrypt
#/usr/local/webserver/php/bin/phpize
#./configure --with-php-config=/usr/local/webserver/php/bin/php-config
#make && make install
给你的php.ini添加一条extension=mcrypt.so
重启apache
# /usr/local/apache2/bin/apachectl restart
查看phpinfo(),mcrypt以及安装好


安装完成
--------------------------
2.静态编译
在任意PHP文件中加入函数 phpinfo()，即可取得目前PHP的配置
在这些配置后面新增需要加入的配置：--with-mcrypt --with-mhash
然后进入php源代码目录make clean（一定需要） ，然后执行这条完整的configure命令,依次
make
make install
根据你的需要加上所要的配置，例如：
./configure --with-apxs2=/usr/local/web/apache/bin/apxs --with-mcrypt --with-mhash

//./configure --with-apxs2=/usr/local/web/apache/bin/apxs --with-mcrypt --with-mhash --with-libxml-dir --enable-bcmath --enable-sockets

总体思路，先安装软件，然后安装扩展，启用扩展，如果没有源码  就去官网下载一份

升级了操作系统，导致php版本升级，重装redis扩展，下载回来编译，phpize phpconfig make make install 在php.ini中开启，重启php进程，如果是apche的话  重启apche

下载安装debug
这些是安装Xdebug的说明。请参阅 http://xdebug.org/support.php以获得支持。

您需要与其他PHP分开编译Xdebug。但是请注意，您需要访问脚本phpize和php-config。如果您的系统没有，phpize并且php-config您将需要首先从源码包中编译和安装PHP，因为这些脚本是PHP编译和安装过程的副产品。源版本与安装的版本匹配很重要，因为PHP版本之间存在轻微但重要的差异。

一旦您有权访问phpize并php-config执行以下操作：

解压压缩包：tar -xzf xdebug-2.4.x.tgz。请注意，您不需要在PHP源代码树中解压缩tarball。Xdebug是独立编译的，如上所述。
cd xdebug-2.4.x
运行phpize：（phpize 或/path/to/phpize如果phpize不在您的路径）。
./configure --enable-xdebug（或：../configure --enable-xdebug --with-php-config=/path/to/php-config如果php-config不在你的路径）
跑： make
cp modules/xdebug.so /to/wherever/you/want/it
添加以下行到php.ini： zend_extension="/wherever/you/put/it/xdebug.so"
重新启动您的网络服务器。
编写一个调用PHP页面phpinfo();。在浏览器中加载它，并查找xdebug模块上的信息。如果你看到，你已经成功了！

php -m 查看php已安装模块


适配器模式

约定接口

由子类实现接口，这样实例化的类 都可以用。

策略模式

将一组特点的类行为和算法封装成类，以适应某些特定的上下文环境，这种模式就是策略模式。

实际应用

y一个电商网站 针对男女用户 展示不同的类目，且所有广告位要展示不同的广告

对一个bug 或者功能点代码 进行更改的时候，要想想 之前 有没有相关代码需要处理的，这样 可以更完善一点。


 $("#add_number").on('click','.minus',function () {
            $(this).parents('.add_ul').remove();
        });
on js 事件委托，遇到一个问题，js提交二维数组到后台，看来是需要拼装数据，后台再次解码这个数据
新建一个表单，序列化成字符串，隐藏到表单里面，提交到后台了，
由于报名和 订单是分开的，
于是 session存储住相关信息，然后放到订单表里面，
再次下单支付的时候 继续维护相关字段，支付的时候 价格也不算错。


今天定下了目标 1个月以后看结果，

今天写了博文，从8点看书 学习到11点睡觉！


今天工作上主要是 修复程序的漏洞，查看阿里云相关的东西，比如说磁盘快照，扫描漏洞，修复漏洞，同时也在网上找的一个js方法，破解微信防盗链机制。


今天发现程序中的一个问题，比如说没有tdd开发，导致一段错误代码，过后才被测试出来，修复它。

今天看书，写代码，早点睡觉。

看书 修复bug，有趣看了下支付宝支付，so easy 睡觉。

年轻人 需要学习 努力 思考，今天指导别人做支付，看书 睡觉

学习shell，学习理解分布事务，今天又发现一个持续交付平台，阿里云出的 ，免费 https://market.aliyun.com/products/55530001/cmgj007963.html#sku=yuncode196300000
继续学习，年轻人 没事别睡那么早

看代码，写程序，练好基本功，睡觉

写代码
写代码 睡觉

今天修复curl bug，学习 睡觉
给力的队友真的很重要111 学习

终生奋斗，至少要奋斗2代人。

检查错误，要看下其他地方有没有这样的问题，有空闲时候要去检查一下自己的代码。
有没有问题，先于别人发现自己的问题。

调整union微信相关

mysql强化30天，结果导向
更新博客

1204 更新博客，阅读mysql官方文档
1205更新博客
今天更新到阿里大于短信的时候，ios解析json出错，然后捕捉头信息，后来发现时大于的demo里面有
header("Content-Type: text/plain; charset=utf-8");
这样一个头声明，导致错误，后来去掉就好了。

1206更新博客
php 异常捕捉错误，微信模版推送

1207更新博客早睡
php cnzz加密，加解密算法

1208
兼容第三方合作用户的思路
先判断手机号存在不，存在直接登录，然后判断uid有对应用户吗，存在直接登录，如果有phone和uid则一起注册，否则 用uid注册。

1209
学习到的知识 mysql触发器，编程， 后续相关接触到的东西slim框架，淘宝客

1210
写博客，看slim文档

1211
淘宝客相关，bug修复相关

1212
没写博客，微信支付相关，淘宝api相关

1213
给app写接口，重新安装redis
