编程心得与坑
1、客户端不可信，比如说 又一个人 提供视频转码服务，转码成功后 它会通知我，
接口文档上写的是通知一次，但是我们作为程序员一定要想到它回调多次的情况。
2、写程序不要有拖延症习惯，这样留给自己解决突发情况 的时间会变得很少


	$url ="./ask_detail/detail/8";
	$url ="/ask_detail/detail/8";
  这2个url 给a标签会有什么样的效果，后者会当成一个绝对路径来找，前者呢 不会


if(intval($rand) == $redis->get('login:' . $mobile))
{
//xx处理业务
}
这个判断有些不正确的地方 你看出来了吗？ 因为可能存在没有的验证码，左值为0 右值也为0 于是为true 改进代码如果

if((intval($rand) == $redis->get('login:' . $mobile))&&$rand>0)
{
//xx处理业务
}


大家都应该用统一的文件管理工具。
否则版本不一很容易出问题。
醉了醉了
redis
写代码抽象思维很重要，先想好自己要做什么，适当运用设计模式来解决问题

今天帮助处理oss问题
订单相关问题


js错误代码例子
function  needLogin() {

        var loginBool = <?php echo intval($_SESSION['user_id']);?>
        if(!loginBool){
            if(getEnv() ==1){
            $("#loginShow").click();
            }else if(getEnv()==2){
                $("#loginShow").click();
            }else if(getEnv()==3){
                window.location="/wechat/login";
            }
        }
    }
    needLogin();

    正确做法
    function  needLogin() {

            var loginBool = <?php echo intval($_SESSION['user_id']);?>;//这个fen hao分号太重要了
     if(!loginBool){
                if(getEnv() ==1){
                $("#loginShow").click();
                }else if(getEnv()==2){
                    $("#loginShow").click();
                }else if(getEnv()==3){
                    window.location="/wechat/login";
                }
            }
        }
        needLogin();

        在js中不要定义重复函数，否则 代码无法正确执行。。有些时候粘贴了几次 问题就出来了。放在一个公共地方 或者文件里面 选择加载即可

        js document ready


        git tip 个性化文件 要加入忽略列表

 数据结构导数据，新旧库迁移
 方法1
 写接口，根据用户导数据，按用户消费行为分级，数据导入导出

 方法2
 数据倒过去，新表的先把主键自增去掉，主键索引关掉，数据导完后，再恢复主键


 另外，想到好点子的时候，不要直接告诉同事，应该直接告诉领导( 避免同事告诉领导，然后就变成他自己的想法了)


改动composer文件 或者别人git仓库里文件的时候 在自己项目中使用的时候，要做文档备注 不然可能会忘掉

分析bug要耐心 细心调试，重复犯错毫无意义

redis 字符串 列表 集合 哈希 有序集合 这个不仅要了解到这几种结构名词，同时在大脑里面构思其具体样式，
redis操作数据都是可以按毫秒计算的，redis事务，持久化方式 有aof 和快照


//课程 报名 ，关联视频，有课程

退出的时候 检测有没有上一页 没有跳转一个默认页

微信登录或者其他的 退出，不要用history go -1,用php 的redirect 跳转

判断竞争条件，及时销毁不用的session



微信支付相关限制太多了，
js作用域，回调域名，扫码回掉域名，支付发起目录，涉及到 商户平台账号，公众平台账号


ci框架路由注意 大小写，配置文件中的 index_page 会影响到他的路由，自动重写带上index.php，可能与 nginx配置文件冲突

比如 有人的做法是hi index_page 是index.php，config中的base_url是个路径，这样他用ip直接访问 上级 就会得到正确的ci路径
这样做 不如 nginx 配置好重写，index_page 取空 ，base_url实际路径


在Resque中，一个后台任务被抽象为由三种角色共同完成：

Job | 任务 ： 一个Job就是一个需要在后台完成的任务，比如群发送邮件，就可以抽象为一个Job。在Resque中一个Job就是一个Class。
Queue | 队列 ： 也就是上文的消息队列，在Resque中，队列则是由Redis实现的。Resque还提供了一个简单的队列管理器，可以实现将Job插入/取出队列等功能。
Worker | 执行者 ： 负责从队列中取出Job并执行，可以以守护进程的方式运行在后台。
那么基于这个划分，一个后台任务在Resque下的基本流程是这样的：
在Resque中，有一个很重要的设计：一个Worker，可以处理一个队列，也可以处理很多个队列，并且可以通过增加Worker的进程/线程数来加快队列的执行速度。

流程如下：

将一个后台任务编写为一个独立的Class，这个Class就是一个Job。
在需要使用后台程序的地方，系统将Job Class的名称以及所需参数放入队列。
以命令行方式开启一个Worker，并通过参数指定Worker所需要处理的队列。
Worker作为守护进程运行，并且定时检查队列。
当队列中有Job时，Worker取出Job并运行，即实例化Job Class并执行Class中的方法。




